from abc import ABC, abstractmethod

class Piece(ABC):
    @abstractmethod
    def move(self):
        pass

class Pawn(Piece):
    def move(self):
        print("Pawn moved")

class Rook(Piece):
    def move(self):
        print("Rook moved")

class Knight(Piece):
    def move(self):
        print("Knight moved")

class Bishop(Piece):
    def move(self):
        print("Bishop moved")

class Queen(Piece):
    def move(self):
        print("Queen moved")

class King(Piece):
    def move(self):
        print("King moved")

class PieceFactory:
    @staticmethod
    def create_piece(piece_type):
        if piece_type == "pawn":
            return Pawn()
        elif piece_type == "rook":
            return Rook()
        elif piece_type == "knight":
            return Knight()
        elif piece_type == "bishop":
            return Bishop()
        elif piece_type == "queen":
            return Queen()
        elif piece_type == "king":
            return King()
        else:
            raise ValueError("Invalid piece type")

class Board:
    def __init__(self):
        self.board = [[None for _ in range(8)] for _ in range(8)]
        self._populate_board()

    def _populate_board(self):
        for i in range(8):
            self.board[1][i] = PieceFactory.create_piece("pawn")
            self.board[6][i] = PieceFactory.create_piece("pawn")

        self.board[0][0] = PieceFactory.create_piece("rook")
        self.board[0][1] = PieceFactory.create_piece("knight")
        self.board[0][2] = PieceFactory.create_piece("bishop")
        self.board[0][3] = PieceFactory.create_piece("queen")
        self.board[0][4] = PieceFactory.create_piece("king")
        self.board[0][5] = PieceFactory.create_piece("bishop")
        self.board[0][6] = PieceFactory.create_piece("knight")
        self.board[0][7] = PieceFactory.create_piece("rook")

        self.board[7][0] = PieceFactory.create_piece("rook")
        self.board[7][1] = PieceFactory.create_piece("knight")
        self.board[7][2] = PieceFactory.create_piece("bishop")
        self.board[7][3] = PieceFactory.create_piece("queen")
        self.board[7][4] = PieceFactory.create_piece("king")
        self.board[7][5] = PieceFactory.create_piece("bishop")
        self.board[7][6] = PieceFactory.create_piece("knight")
        self.board[7][7] = PieceFactory.create_piece("rook")

    def display(self):
        print("  a b c d e f g h")
        for i in range(8):
            row_str = f"{8 - i} "
            for j in range(8):
                piece = self.board[i][j]
                if piece is None:
                    row_str += ". "
                else:
                    row_str += piece.__class__.__name__[0].upper() + " "
            row_str += f"{8 - i}"
            print(row_str)
        print("  a b c d e f g h")
class Game:
    def __init__(self):
        self.board = Board()
        self.current_player = "white"

    def play(self):
        while True:
            self.board.display()
            move = input(f"{self.current_player}'s move: ")
            start_pos = move[0:2]
            end_pos = move[3:5]
            start_col = ord(start_pos[0]) - 97
            start_row = int(start_pos[1]) - 1
            end_col = ord(end_pos[0]) - 97
            end_row = int(end_pos[1]) - 1
            piece = self.board.board[start_row][start_col]
            if not piece:
                print("Invalid move: no piece at starting position.")
            elif self.current_player != piece.color:
                print("Invalid move: wrong color piece selected.")
            elif not piece.is_valid_move(start_row, start_col, end_row, end_col, self.board.board):
                print("Invalid move: piece can't move to that position.")
            else:
                self.board.move_piece(start_row, start_col, end_row, end_col)
                self.current_player = "black" if self.current_player == "white" else "white"
game = Game()
game.play()
